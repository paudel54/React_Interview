Creating LIST 
1//React always asks for id on creating a list
this is because react needs to identify each rendered item, 
when item need to be added, changed or removed. 

Setting index as a unique Identity is not at all a preferred way, because the moment the item
is added or value is changed, the index may refer to a different entity.
2//React prefers id or key ot be of String. 
 
3// Should you use the index of map() method as key attribute?
No=> key: must have stable identity. Its better to assign stable id, eg that can be from database,  

4// what would be teh defalut value of attrribute
=>TRUE <DemoComponent value/>


5//Use of Spread Operator:
passing attribute with the Spread Operator is a fantastic short way when you are willing to pass object to props. 

6.//React Fragmants:
allows up to wrap children without adding extra notes to the DOM.

7.//Event Handling with inputs, checkbox,text inputs, forms!!
 {/* on passing parameter on events like onCLick={()=>functionWithParameters()} or args we need to have a fuction with return so it prevents on load behaviour.  */}
 //Synthetic Events (e)
 e.target means we are going to get the reference of the element which raised the event. 
 What is Synthetic Events.||> A syntheticEvent is a wrapper around the native browser event object and that is passed to every function automatically
 //ITS automatically Received. Reference of event received as each
 8. Write a code to get content of divison. 
 Create a div with onClick handler and console.log('Content of div', e.target.innerHTML)

9. Input Events!
    event handler: onChange={getChange} e.target.value
    How do you update text input on react?
    => SyntheticEvent (e.target.value) has reference to that element from which we can update the state and Render to InterFace. 

9.Preventing Default behaviour on form Submit. 
    How will you prevent the default behaviour of an element?
    can you use return false ? no not in react
    we use e.preventDefault() explicetly. 

10.! When you try to update Object Literal, you have to make sure that the previous/existing value is there & then you update the new value
How will you update the individual value of state inside an object?
// updating individual value of state inside an object by the use of Spread operator

11. Can you directly render object?
object are not valid react child we need to convert into String with JSON.Stringify

12.Improvising handlers, single handlers for all inputs or state
introduction to square [] to haold variable
let test = "ename";
const obj = {
    [test]: 'Name'
}
 
 Here Key of an object hold on Variable Name
 //implementaion of dynamic keys and single change handlers. 

 13. Why is updating state with "functional update" syntax better?
   const handleChange = (e) => {
    //  better apporcah with use of previous state
    // setPersonInfo({ ...personInfo, [e.target.name]: e.target.value })
    setPersonInfo((prevState) => {
      return { ...prevState, [e.target.name]: e.target.value }
    });
  }

!!=> React doesnot update the state immediately as it has its own method or schedule to update the state
INcase there are many updates of state happening at same time, it may refers to incorrect copy of state
functional update makes sure we have latest copy of the state. 

14.// Checkbox or Radio -Input Feild
Dropdown button =>value Property
Textboxes => value Property
Checkbox/radioButon =>Checked Property

15.// What is  Conditional Rendering. => Showing Specific components depending on Specific Condition. 
Depending upon user Interface Changes: realworld exmp: dashboard switch ADMIN vs USER. 
using if..else swithc..case.. ternary Operator ( condition ? true: false) logical &&

16. Explain the JSX element variable syntax and concept. 

const prodItems = (items.map((item)=>{
  return (
    <li>{item.pName}</li>
  )
}))

17.  Logical && 
{condition if true && renders HTML elements}

18. Multi-Page Application
    page reloading is not good idea for user: 
    page reloading and refreshing not good approach
    //difference between MPA(Multipage Application vs Single Page Application)

    MPAs reloads the HTML pages 
    HTML pages with css and other things are rendered on the server & then they are delivered
    They are reloaded/rerendered at the client Side
    The refresh of the page is visible to the end user. 

    //Single-Page Application.ðŸ”¥
      SPAs loads the page once and then only it transmits the data between client and server
      This transmission of data basically doesnot refresh the entire page-the main container remains as it is & the data/inner pages appears as 
      if they chage but they are genereated at client side only. !

    19. How do you acheive Single Page Application
      use of link instead of anchor. 
      firstly: install react-router-dom, 2ndly wrap the entire app on index.js with BrowserROuter and 3rd use Route package and Link to attain state. 

    20. Looking at code refactor dashboard/Home page comes on openeing the  webpage
      // wrap route1,route2, ..routen  with switch and put path = / at the end. 

      //Explain the "exact" attribute's purpose used with <Route> Component . 
      !! <Route path = "/"> Matches the beginning of the String not whole String. all other paths like /address / porducts etc had matching inital /
      So, / was rendering to every component to avoid this situation and to have exact path matching we swithc on the arrtibute "exact ".

      //how is it different to use <Route> with and without <Switch>?
       <route> placed in <Switch> will have different execution, if route is executed, then rest of the routes are not rendered and are skipped. 
       This will always match the URL for all the items selected. 
  
  21. what is multi-Page-Application ?  on every url change page reloading because once product/1 is fetched for product/2 everythingtom client and server has to be done from scratch
      //this will reload the page which is not efficent so Single-Page_Application got introduced. 
      //single page appliaction SPA will only renders onto client side. the renderig or refetching the html is not required. 

??????????????????????????????????????????ROUTE??????????????????????????????????????????????????????

  22.. Route Paramaters. 

      //How can you link dynamic Routes? || How do you link Parameters witha Route?
       To add dynamic Parameters with the Route URL, you just have to use => 
       <Route path = "domain.com/route/:paramname" </Route>    it can be extreacted by useParams() hook . the last /item
       //  /route/:<param> is given at runtime which can be anything. 
  23. useRouteMatch() hook return path, url isExact and params as object

    path: vs URL 
    path
    /tutorials/:title then the path will show => /tutorials/:title   || path is used for building out nested Routes 
    URl
    /tutorials/regex then the path will show the value of title      || URL is used for building out <Links>

24. WHat is nested Routes?
    Routes are defined at component level and there can be dynamic urls configured with nested Routes. 
    
    //useRouteMatch() hook - We have used to get the match object or match data
    Though it attempts to match the current URL in the same way as that a <Route> would as per the official site of react Router. 
    we can use it 2 ways:
    1. const match = useRouteMatch(); || in this case it returns the match object and no parameter is given 
    2. Object as parameter is passed. 
        const match = useRouteMatch({
          path:'/tutorials/:title',
          strict:true
        })

    //what is "match" object in react router useRaouterMatch()? 
     The "match" object contains information about how a <Route Path> is matched
     The match object has various object properties like params, isExact, path and url

    25. Redirect. 
        <Redirect> react router dom. useful for Redirecting to valid page esp in valid auth or invalid auth or throwing error out .
        EXAMPLE
        <Route exact path = "/">
        {validUser ? <Redirect to = "/dashboard"/> : <InvalidUser/>}
        </Route>
    26. No Match
        How would you configure the match-all/catch-all or 404 Not Found Kind of route?
          use of wildCard Character "*" Route path= "*' we can implement, if no any match is found then go to the particular Routed Page.  

        Explain the use of useLocation() hook. 
        => It returns the location object which has the value of active url
        =>In a way it's like window.location of JavaScript. 
        When you have to trigger an event on URL change. it is vaery useful   
    
    27. <NavLink> VS. <Link/>
        //Link prevents Page refresh on renders
        //Navlink => allows to appply css with attributes liks activeClassName and activeStyle

    28. Difference between Link and NavLink 
        // NavLink gives us the option to apply better styling. It has activeClassName
        // & activeStyle attributes which are really helpful to design more effective & attractive menus. 
    29. Differnece between activeClassName and activeStyle of Navlink ?
        activeClassName takes a string as a value, activeStyle takes an object/object literals
        both activeClassName & activeStyle executes on active link only. 
    
    30. Explain isActive attribute used with NavLink
      When the link is active, you have match object and location which can be used to add more logic to active link. 

    31. useHistory() hook 
      useHistory() hook returns the history object which you can refer to deal with the history programmatically.

      **! use History is depreciated, current useNavigate(). 
      goback features can be implemented. || go ||goBack || goForward || provides location. 
      navigation too    
      history.push vs history.replace || push helps in getting loop. || replace will replace and break loop. 

    31. Preventing Navigation
       <Prompt when = {boolean} message = "String"/>

    32. How can you show a prompt before navigating away from a specific page?
         use of <Prompt/> component react-router provides.  
    33. How can you prevent navigation for a specific link in menu?
          use of function with message attribute
                          <Prompt when={!dataEntered} message={(location, action) => {
                               if (location.pathname === "/about") {
                                    return false;
                                    } else {
                                     return true;
                                   }
                                  }} />
    34.What is  Query Parameters
          Query Parameters are attached to the end of URL after a '?'
          localhost:3000/tutorials/ts?price = $80
          //key value onto query 
          function useQuery(){
            return new URLSearchParams("?price=$20"); || URLSearchParams is not a react-router elements. Its a javaScript interface which gives various method to work with a query string of a URL
          }

          useLocation().search returns object that contains search method which exactly returns query  paramas. 
          useQuery(); hook to get urlQuey key:value
          query.get('queryKey');
  35. var before '?' is a key to query parameter '+' in url represents an empty space, and & represents the sperators

  36. What is hte purpose of useLocation() hook?
      It is useful, as it returns the location object which contains various values of the current URL
      Generally we use it whenever we have to deal with current location of URL, or even query  String Parameter values. 

      It returns new location everytime the URL changes, somewhat like the state which is updated on everyChange. 

???????????????????????????????COMPLEX STATE MANAGEMENT WITH CONTEXT API REDUX REDUX TOOLKIT ???????????????????????????????????????????
    
    37. What is  Props drilling?:
         Passing data from component to component with props. 
    38. Is it always good to avoid prop-drilling pattern? Should you put the global state all the time using context API or redux?
          => one or two level of component we use props: if level increases on high better to use global state
          => when it is getting complex with various level, then certainly we choose to make few data peices GLobal 

  29. CONTEXT API :FOR TOTAL SUM

  
  30. Explain the concept of context API and how do you use it into your Project?
     Whenever there is a need to have some peices of data vailable to variour/multiple componenets, (maybe) entire application,
     then we use context API. IT consists of 3 majour steps. 


     Context API setup
      1.Create Context
      //defalut value is like state management but in global scope
      const myContext = React.createContext(defalutValue);
      ex:2
      const ProdContext = React.createContext({pName: 'Apple', price:45});
      
      here, myContext is a "Global Context Object "
      2.Provider

        //the value would be avaialbe onto entire App & sub-components
        <MyContext.Provider value = {value}>
          <App/>
        </MyContext.Provider>

        ex:2:
        <MyContext.Provider value = {total}>
          <Total/>
        </MyContext.Provider>
        || On this case the value of total is availabel to current compotnet and <Total/> only
          context must be matched. 
      3.Consumer
      <TotalContext.COnsumer> </TotalContext.Consmer/>

    31. How does the Context.Consumer works?
        It is a React component that is suscribed to Context Changes. 
        It requires function as child. This function receives current context value

    32. What will be the context value if there is no Provider used?
        If there is no provider, Consumer will receives the default value that createContext has set upon. 

    33. useContext() hook. 
        =>Esp designed to shorten or ease Context.consumer with callback return 
        const value = useContext(MyContext);
        =>Here we are passing the context object as parameter & it returns the current context value of nearest <MyContext.Provider>
        referring the component tree. 

    34. Expain useContext() hook.
        It takes the context as parameter and returns context value. 
    35. Will the component using useContext() hook re-render everytime the context value changes?
      => yes, if there is change in global context, it will re-render the compoent . 

  ?????????????????????????????????REDUX??????????????????????????????????????????????????????????????
State management ith redux. 
1. Create the GLobal Store & Reducer. 
2. Use the <Provider> to pass/provide the store data
3. Access the store data at component level
4. Dispatch action if there are events. 

   * Whenever there is an action like click events from the component, we dispatch the action type along with the data called payload. 
    ex:-> dispatch({type: 'ADD'})
          dispatch({type:'ADD', payLoad: {}})
          dispatch({type:'ADD', value: 0})   || value can be set to anything like, String/Number/ObjectLiterals/Array

          //information passed with dispatch is called payload. 

events=> dispatch(type,payLoad)=>ReducerFunction(state, action)
:> Reducer Function holds the action type when matches executes fn

Reducer becomes a global function, 
where we are going to deal/manipulate with the state & dispatch() is a method whcih is called form the component
on every event. 

  36.Which package do you need to implement redux with react applicatoin?
    npm install --save redux react-redux

  37. In which Scenario do you have to use redux or a similar framework? 
Whenever you hae an application which has a larger size or data set- there will be data shared amoung various components or the entir app on such scenerio we nned to use it. 

28.Create global Store
To create Global Store, Use createStore() method of redux
const store = createStore(reducer);
//store returns the object. i.e the Global State. 
//!!!remember the reducer function becomes an actual reducer when you pass it as an argument inside createStore() method. 

==> THis implies we need to CREATE REDUCER function first and pass it as argument to createStore. 

38. How to create a global store? || Explain the usage of redux -createStore() method. 
  step:1    we can create a global store with createStore() method that consists of reducer function but it's now depreciated. 
      when we create a reducer function we must make sure that there is always two Parameters
      state and action. 
      // the reducer has 2 parameter state and action: action receives the Object Literal(value) from dispatch. 

      //import createStore from "redux" not react-redux. 
      react-redux is a connector is just to connect component and redux store. 
  step:2 PROVIDE THE store to entire application with <Provider> compoent from react-redux. 
        It make redux store avaiale to any nested components. 
39. Explain the provider component usages. 
        <Provider store = {store}>
            <App/> || if you want to provide access to only some of components then wrap woth componet only
        </Provider>
    || Our goal is to make the store object available to the entire application of the component whcih we reap on 

39. Is it essential to put <Provider> inside index.js?
    No, its not, Since, its highest level so we prefer the app is rendered, 
40. Explain the difference between useStore() & useSelector() hooks.   
     useSelector() hook to get access the specific data instead of instead store! useStore() to access entrie store. 
     we dont need useStore() i.e total store value, we need specific value at specific component so we use useSelector() wrt useStore() for better performance.
      //useSelector receives a function where state is passed and specific value is retained. 
     const products = useSelector((state)=>state.products);
     const cart = useSelector((state)=>state.cart);
     const total = useSelector((state)=>state.total); and ... 

41. explain the flow of event handling with redux?
    reducer are global function that helps in global updates. 
    !! IN REDUX whenever there is click events or events on component it has to be dispatched into reducer function that updates
    Global state. 

42. How do yo dispatch events with hooks? or Explain useDispatch hook
    const dispatch = useDispatch();
    The useDispatch() hook returns a reference to the dispatch function from the redux store. 
    dispatch({{type: 'ACTION', payload: value}}) holds obj literal of type and payload

Depreciated . How will you connect the class based React component to redux store?
    The connect() function allows the class based component to connect with redux store
    connect()(Component)
    connect(mapStateToProps)(Component)
    connect(mapStateToProps,mapDispatchToProps)(Component)
    connect(null, mapDispatchToProps)(Component)
Depreciated . How does the mapStateToProps() method works?
    It is a function wich is called anytime the store is updated. 
    const mapStateToProps = (state)=>{
      return {
        products:state.products ?? state props
      }
    }

  43. Organizing reducers into more proper: combined Reducer is depreciated => Modern way is use of Slices. 
      //Reducers are seperately organized into different files so later they can be combined as one. 
  
  44. Explain the code pattern if you use combineReducers() utility function. 
        Every reducer is going to be a seperate file and which is merged in index.js
        we use combineReducer method with accepts obj literals with key value param. Key is the main entry to access any reducers value
        state.key.initDefault

  45. Action Type Constants. Older approcahes but important. 
      => in reducer (action.type === 'LOGIN').
            typing by default can lead to typo error to resolve this came to play
            //putting all actions on seperate file with giving const Name. 

  46. Advantage of defining action type identifiers!.
        This sharply reduces typo error managing action type onto seperate files. 
    
  47. Asynchronous Redux. 
      //There is another challenging scenario with redux when we have to configure asynchoronous call. 
      
      //pure function means we can predict the output. 
      //Impure function mutates variables/state/data outside of it's lexical scope. 
      //Impure function it's not sure what output because we are going to fetch data.
      ////Asynchronus process are impure only.

!! inside REDUCER FUNCTION we don't put asynchoronous call or APIS
!! REDUCER SHOULD ONLY CONTAIN PURE FUNCTIONLITY 
!! API CALL BEING IMPURE FUNCTION CANNOT BE PLACED INSIDE REDUCER. 

!!docs reference. 
By iteslf, a Redux store doesn't know anything about async logic. It only knows how to synchronously dispatch actions, update the  state 
by calling the root reducer function, and notify the UI that something has changed. ANy asynchronicity has to happen outside the store. 

48. Async Redux: implementaion -validateUser();

  dispatch({type: LOGIN, loginDet:loginDet})
  
  ==> API:: 
  const validateUser= ()=>{
    //API call
    //validation
    dispatch((type:LOGIN, loginDet:loginDet))
  }
  ==> const loginReducer = ( state=initData, action )=>{  }

  BIRTH OF Redux Thunk Middleware!!
  Redux thunk Middleware will make the dispatch object available whenever you
  have dispatched 
  the acton..

  !!!!! thunk being a Middleware gets executed on every dispatch and does receive the dispatch object. 
  !!!!! npm package:: npm install redux-thunk

49. Thunk is function : function we return is thunk function. 
    function() wrapper{
      return  function thunk(dispatch){
        //API/ setTimeOut().  
      }
    }
...................................clearner code without function name arrow fn in action ................
  validateUser(loginDet)=>{
    //return with no function name!!
    return(dispatch)=>{
        //setTimeOut or API call. 
    }
  }

50. How will you handle asynchronous call from redux?
                    OR 
          What is redux thunk?

It can be handled in different way. #Redux-Saga is also alternative but,
redux saga is extensively used when there are larger appliactions & it is easier to handle with lot of functions calls 
[the dispatch() is available with the help of redux-thunk]

51. Explain the steps of configuring redux-thunk. 
    1. include {applyMiddleware} from redux.
    2. import thunk function from 'redux-thunk'.
    3. pass thunk fn to createStore().
    5. onto actions make a redux thunk with dispatch in return. 
